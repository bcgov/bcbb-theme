<?php

/**
 * @file
 * BC base-build theme file.
 */

/**
 * Implements hook_preprocess_HOOK().
 */
function bcbb_theme_preprocess_links__node(array &$variables): void {
  if (isset($variables['links']['book_add_child']['link'])) {
    // Add button classes.
    $variables['links']['book_add_child']['link']['#attributes']['class'][] = 'btn';
    $variables['links']['book_add_child']['link']['#attributes']['class'][] = 'btn-success';
    // Add icon.
    $variables['links']['book_add_child']['link']['#attributes']['class'][] = 'icon-bi-plus-circle';

  }
  if (isset($variables['links']['book_printer']['link'])) {
    // Add button classes.
    $variables['links']['book_printer']['link']['#attributes']['class'][] = 'btn';
    $variables['links']['book_printer']['link']['#attributes']['class'][] = 'btn-light';
    // Add icon.
    $variables['links']['book_printer']['link']['#attributes']['class'][] = 'icon-bi-printer';
  }
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function bcbb_theme_theme_suggestions_form_alter(array &$suggestions, array $variables): void {
  // Get the form ID from the variables.
  $form_id = $variables['element']['#form_id'];

  // Add a theme suggestion based on the form ID.
  $suggestions[] = 'form__' . str_replace('-', '_', $form_id);
}

/**
 * Implements template_preprocess_input().
 */
function bcbb_theme_preprocess_input(array &$variables): void {
  // Except on the login page, adjust the classes of the login button.
  if (($variables['element']['#id'] ?? NULL) === 'edit-openid-connect-client-keycloak-login' && \Drupal::routeMatch()->getRouteName() !== 'user.login') {
    // Remove 'button' value from classes.
    unset($variables['attributes']['class'][array_search('button', $variables['attributes']['class'], TRUE)]);
    // Add class that gives appearance of a link.
    $variables['attributes']['class'][] = 'bb-link-light';
  }

  // For certain values of #id, set the 'icon' variable.
  $icons = [
    'edit-reset' => 'icon-bi-trash3',
    'edit-submit-site-search' => 'icon-bi-search',
  ];
  if (isset($variables['element']['#id']) && is_string($variables['element']['#id']) && isset($icons[$variables['element']['#id']])) {
    $variables['icon'] = $icons[$variables['element']['#id']];
  }
}

/**
 * Implements hook_preprocess_HOOK() for bcbb-search-results.html.twig.
 */
function bcbb_theme_preprocess_bcbb_search_results(array &$variables): void {
  // Get route name.
  $route_name = \Drupal::routeMatch()->getRouteName();
  // See if route matches the search results page.
  if ($route_name === 'page_manager.page_view_site_search_site_search-panels_variant-0') {
    // Create a custom variable that can be defined in twig.
    $variables['wrapper_attributes']['class'][] = 'bcbb-search-wrapper';
    $variables['sidebar_wrapper_attributes']['class'][] = 'bcbb-search-sidebar';
    $variables['facet_wrapper_attributes']['class'][] = 'bb-collapse';
    $variables['facet_wrapper_attributes']['class'][] = 'bb-collapse-responsive';
    $variables['toggle_variable'] = 'show_hide_facets';
  }
}

/**
 * Implements hook_preprocess_HOOK() for page-title.html.twig.
 */
function bcbb_theme_preprocess_page_title(array &$variables): void {
  $variables['title_attributes']['class'][] = 'page-title';
}
